/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { fromEvent, Notification } from 'rxjs';
import { concatMap, dematerialize, filter, map, materialize } from 'rxjs/operators';
/**
 * \@internal
 * @template I, O
 * @param {?} worker
 * @return {?}
 */
export function workerIsTransferableType(worker) {
    return !!worker.selectTransferables;
}
/**
 * \@internal
 * @template I, O
 * @param {?} worker
 * @return {?}
 */
export function workerIsUnitType(worker) {
    return !!((/** @type {?} */ (worker))).workUnit;
}
/**
 * \@internal
 * @template I, O
 * @param {?} worker
 * @param {?} incomingMessages$
 * @return {?}
 */
export function getWorkerResult(worker, incomingMessages$) {
    /** @type {?} */
    const input$ = incomingMessages$.pipe(map((/**
     * @param {?} e
     * @return {?}
     */
    (e) => e.data)), map((/**
     * @param {?} n
     * @return {?}
     */
    (n) => new Notification(n.kind, n.value, n.error))), 
    // ignore complete, the calling thread will manage termination of the stream
    filter((/**
     * @param {?} n
     * @return {?}
     */
    n => n.kind !== 'C')), dematerialize());
    return workerIsUnitType(worker)
        ? input$.pipe(concatMap((/**
         * @param {?} input
         * @return {?}
         */
        input => worker.workUnit(input).pipe(materialize()))))
        : worker.work(input$).pipe(materialize());
}
/**
 * @template I, O
 * @param {?} workerConstructor
 * @return {?}
 */
export function runWorker(workerConstructor) {
    /** @type {?} */
    const worker = new workerConstructor();
    /** @type {?} */
    const incomingMessages$ = fromEvent(self, 'message');
    /** @type {?} */
    const transferableWorker = workerIsTransferableType(worker);
    return getWorkerResult(worker, incomingMessages$).subscribe((/**
     * @param {?} notification
     * @return {?}
     */
    (notification) => {
        // type to workaround typescript trying to compile as non-webworker context
        /** @type {?} */
        const workerPostMessage = (/** @type {?} */ (((/** @type {?} */ (postMessage)))));
        if (transferableWorker && notification.hasValue) {
            workerPostMessage(notification, worker.selectTransferables(notification.value));
        }
        else {
            workerPostMessage(notification);
        }
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuLXdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29ic2VydmFibGUtd2Vid29ya2VyLyIsInNvdXJjZXMiOlsibGliL3J1bi13b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUE0QixNQUFNLE1BQU0sQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7O0FBU3BGLE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsTUFBdUM7SUFFdkMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDO0FBQ3RDLENBQUM7Ozs7Ozs7QUFHRCxNQUFNLFVBQVUsZ0JBQWdCLENBQU8sTUFBdUM7SUFDNUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxtQkFBQSxNQUFNLEVBQW9CLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDakQsQ0FBQzs7Ozs7Ozs7QUFHRCxNQUFNLFVBQVUsZUFBZSxDQUM3QixNQUF1QyxFQUN2QyxpQkFBMkQ7O1VBRXJELE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQ25DLEdBQUc7Ozs7SUFBQyxDQUFDLENBQStCLEVBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLEVBQ2pFLEdBQUc7Ozs7SUFBQyxDQUFDLENBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUM7SUFDdkUsNEVBQTRFO0lBQzVFLE1BQU07Ozs7SUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFDLEVBQzNCLGFBQWEsRUFBRSxDQUNoQjtJQUVELE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDO1FBQzdCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQztRQUM3RSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFPLGlCQUFvRDs7VUFDNUUsTUFBTSxHQUFHLElBQUksaUJBQWlCLEVBQUU7O1VBRWhDLGlCQUFpQixHQUFHLFNBQVMsQ0FBK0IsSUFBSSxFQUFFLFNBQVMsQ0FBQzs7VUFFNUUsa0JBQWtCLEdBQUcsd0JBQXdCLENBQUMsTUFBTSxDQUFDO0lBRTNELE9BQU8sZUFBZSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLFNBQVM7Ozs7SUFBQyxDQUFDLFlBQTZCLEVBQUUsRUFBRTs7O2NBRXRGLGlCQUFpQixHQUFHLG1CQUFBLENBQUMsbUJBQUEsV0FBVyxFQUFXLENBQUMsRUFBb0M7UUFFdEYsSUFBSSxrQkFBa0IsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFO1lBQy9DLGlCQUFpQixDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDakY7YUFBTTtZQUNMLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQyxFQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbUV2ZW50LCBOb3RpZmljYXRpb24sIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29uY2F0TWFwLCBkZW1hdGVyaWFsaXplLCBmaWx0ZXIsIG1hcCwgbWF0ZXJpYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBEb1RyYW5zZmVyYWJsZVdvcmssIERvV29yaywgRG9Xb3JrVW5pdCwgV29ya2VyTWVzc2FnZU5vdGlmaWNhdGlvbiB9IGZyb20gJy4vb2JzZXJ2YWJsZS13b3JrZXIudHlwZXMnO1xuXG5leHBvcnQgdHlwZSBPYnNlcnZhYmxlV29ya2VyQ29uc3RydWN0b3I8SSA9IGFueSwgTyA9IGFueT4gPSBuZXcgKC4uLmFyZ3MpID0+IERvV29yazxJLCBPPiB8IERvV29ya1VuaXQ8SSwgTz47XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIFdvcmtlclBvc3RNZXNzYWdlTm90aWZpY2F0aW9uPFQ+ID0gKG1lc3NhZ2U6IE5vdGlmaWNhdGlvbjxUPiwgdHJhbmZlcmFibGVzPzogVHJhbnNmZXJhYmxlW10pID0+IHZvaWQ7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiB3b3JrZXJJc1RyYW5zZmVyYWJsZVR5cGU8SSwgTz4oXG4gIHdvcmtlcjogRG9Xb3JrPEksIE8+IHwgRG9Xb3JrVW5pdDxJLCBPPixcbik6IHdvcmtlciBpcyBEb1RyYW5zZmVyYWJsZVdvcms8SSwgTz4ge1xuICByZXR1cm4gISF3b3JrZXIuc2VsZWN0VHJhbnNmZXJhYmxlcztcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdvcmtlcklzVW5pdFR5cGU8SSwgTz4od29ya2VyOiBEb1dvcms8SSwgTz4gfCBEb1dvcmtVbml0PEksIE8+KTogd29ya2VyIGlzIERvV29ya1VuaXQ8SSwgTz4ge1xuICByZXR1cm4gISEod29ya2VyIGFzIERvV29ya1VuaXQ8SSwgTz4pLndvcmtVbml0O1xufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V29ya2VyUmVzdWx0PEksIE8+KFxuICB3b3JrZXI6IERvV29yazxJLCBPPiB8IERvV29ya1VuaXQ8SSwgTz4sXG4gIGluY29taW5nTWVzc2FnZXMkOiBPYnNlcnZhYmxlPFdvcmtlck1lc3NhZ2VOb3RpZmljYXRpb248ST4+LFxuKTogT2JzZXJ2YWJsZTxOb3RpZmljYXRpb248Tz4+IHtcbiAgY29uc3QgaW5wdXQkID0gaW5jb21pbmdNZXNzYWdlcyQucGlwZShcbiAgICBtYXAoKGU6IFdvcmtlck1lc3NhZ2VOb3RpZmljYXRpb248ST4pOiBOb3RpZmljYXRpb248ST4gPT4gZS5kYXRhKSxcbiAgICBtYXAoKG46IE5vdGlmaWNhdGlvbjxJPikgPT4gbmV3IE5vdGlmaWNhdGlvbihuLmtpbmQsIG4udmFsdWUsIG4uZXJyb3IpKSxcbiAgICAvLyBpZ25vcmUgY29tcGxldGUsIHRoZSBjYWxsaW5nIHRocmVhZCB3aWxsIG1hbmFnZSB0ZXJtaW5hdGlvbiBvZiB0aGUgc3RyZWFtXG4gICAgZmlsdGVyKG4gPT4gbi5raW5kICE9PSAnQycpLFxuICAgIGRlbWF0ZXJpYWxpemUoKSxcbiAgKTtcblxuICByZXR1cm4gd29ya2VySXNVbml0VHlwZSh3b3JrZXIpXG4gICAgPyBpbnB1dCQucGlwZShjb25jYXRNYXAoaW5wdXQgPT4gd29ya2VyLndvcmtVbml0KGlucHV0KS5waXBlKG1hdGVyaWFsaXplKCkpKSlcbiAgICA6IHdvcmtlci53b3JrKGlucHV0JCkucGlwZShtYXRlcmlhbGl6ZSgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bldvcmtlcjxJLCBPPih3b3JrZXJDb25zdHJ1Y3RvcjogT2JzZXJ2YWJsZVdvcmtlckNvbnN0cnVjdG9yPEksIE8+KTogU3Vic2NyaXB0aW9uIHtcbiAgY29uc3Qgd29ya2VyID0gbmV3IHdvcmtlckNvbnN0cnVjdG9yKCk7XG5cbiAgY29uc3QgaW5jb21pbmdNZXNzYWdlcyQgPSBmcm9tRXZlbnQ8V29ya2VyTWVzc2FnZU5vdGlmaWNhdGlvbjxJPj4oc2VsZiwgJ21lc3NhZ2UnKTtcblxuICBjb25zdCB0cmFuc2ZlcmFibGVXb3JrZXIgPSB3b3JrZXJJc1RyYW5zZmVyYWJsZVR5cGUod29ya2VyKTtcblxuICByZXR1cm4gZ2V0V29ya2VyUmVzdWx0KHdvcmtlciwgaW5jb21pbmdNZXNzYWdlcyQpLnN1YnNjcmliZSgobm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb248Tz4pID0+IHtcbiAgICAvLyB0eXBlIHRvIHdvcmthcm91bmQgdHlwZXNjcmlwdCB0cnlpbmcgdG8gY29tcGlsZSBhcyBub24td2Vid29ya2VyIGNvbnRleHRcbiAgICBjb25zdCB3b3JrZXJQb3N0TWVzc2FnZSA9IChwb3N0TWVzc2FnZSBhcyB1bmtub3duKSBhcyBXb3JrZXJQb3N0TWVzc2FnZU5vdGlmaWNhdGlvbjxPPjtcblxuICAgIGlmICh0cmFuc2ZlcmFibGVXb3JrZXIgJiYgbm90aWZpY2F0aW9uLmhhc1ZhbHVlKSB7XG4gICAgICB3b3JrZXJQb3N0TWVzc2FnZShub3RpZmljYXRpb24sIHdvcmtlci5zZWxlY3RUcmFuc2ZlcmFibGVzKG5vdGlmaWNhdGlvbi52YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3b3JrZXJQb3N0TWVzc2FnZShub3RpZmljYXRpb24pO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=