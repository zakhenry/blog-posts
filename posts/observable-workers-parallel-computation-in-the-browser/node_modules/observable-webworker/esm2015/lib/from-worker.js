/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Notification, Observable } from 'rxjs';
import { dematerialize, map, materialize, tap } from 'rxjs/operators';
/**
 * @record
 */
export function WorkerOptions() { }
if (false) {
    /** @type {?} */
    WorkerOptions.prototype.terminateOnComplete;
}
/**
 * @template Input, Output
 * @param {?} workerFactory
 * @param {?} input$
 * @param {?=} selectTransferables
 * @param {?=} options
 * @return {?}
 */
export function fromWorker(workerFactory, input$, selectTransferables, options = { terminateOnComplete: true }) {
    return new Observable((/**
     * @param {?} responseObserver
     * @return {?}
     */
    (responseObserver) => {
        /** @type {?} */
        let worker;
        /** @type {?} */
        let subscription;
        try {
            worker = workerFactory();
            worker.onmessage = (/**
             * @param {?} ev
             * @return {?}
             */
            (ev) => responseObserver.next(ev.data));
            worker.onerror = (/**
             * @param {?} ev
             * @return {?}
             */
            (ev) => responseObserver.error(ev));
            subscription = input$
                .pipe(materialize(), tap((/**
             * @param {?} input
             * @return {?}
             */
            input => {
                if (selectTransferables && input.hasValue) {
                    /** @type {?} */
                    const transferables = selectTransferables(input.value);
                    worker.postMessage(input, transferables);
                }
                else {
                    worker.postMessage(input);
                }
            })))
                .subscribe();
        }
        catch (error) {
            responseObserver.error(error);
        }
        return (/**
         * @return {?}
         */
        () => {
            if (subscription) {
                subscription.unsubscribe();
            }
            if (worker && options.terminateOnComplete) {
                worker.terminate();
            }
        });
    })).pipe(map((/**
     * @param {?} __0
     * @return {?}
     */
    ({ kind, value, error }) => new Notification(kind, value, error))), dematerialize());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbS13b3JrZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vYnNlcnZhYmxlLXdlYndvcmtlci8iLCJzb3VyY2VzIjpbImxpYi9mcm9tLXdvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQTBCLE1BQU0sTUFBTSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUd0RSxtQ0FFQzs7O0lBREMsNENBQTZCOzs7Ozs7Ozs7O0FBRy9CLE1BQU0sVUFBVSxVQUFVLENBQ3hCLGFBQTJCLEVBQzNCLE1BQXlCLEVBQ3pCLG1CQUFzRCxFQUN0RCxVQUF5QixFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRTtJQUV0RCxPQUFPLElBQUksVUFBVTs7OztJQUFDLENBQUMsZ0JBQWdELEVBQUUsRUFBRTs7WUFDckUsTUFBYzs7WUFDZCxZQUEwQjtRQUU5QixJQUFJO1lBQ0YsTUFBTSxHQUFHLGFBQWEsRUFBRSxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxTQUFTOzs7O1lBQUcsQ0FBQyxFQUFxQyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUM7WUFDN0YsTUFBTSxDQUFDLE9BQU87Ozs7WUFBRyxDQUFDLEVBQWMsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUM7WUFFaEUsWUFBWSxHQUFHLE1BQU07aUJBQ2xCLElBQUksQ0FDSCxXQUFXLEVBQUUsRUFDYixHQUFHOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxtQkFBbUIsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFOzswQkFDbkMsYUFBYSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7b0JBQ3RELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2lCQUMxQztxQkFBTTtvQkFDTCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMzQjtZQUNILENBQUMsRUFBQyxDQUNIO2lCQUNBLFNBQVMsRUFBRSxDQUFDO1NBQ2hCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7UUFFRDs7O1FBQU8sR0FBRyxFQUFFO1lBQ1YsSUFBSSxZQUFZLEVBQUU7Z0JBQ2hCLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUM1QjtZQUNELElBQUksTUFBTSxJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRTtnQkFDekMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQ3BCO1FBQ0gsQ0FBQyxFQUFDO0lBQ0osQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUNMLEdBQUc7Ozs7SUFBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBQyxFQUNyRSxhQUFhLEVBQUUsQ0FDaEIsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpZmljYXRpb24sIE9ic2VydmFibGUsIE9ic2VydmVyLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlbWF0ZXJpYWxpemUsIG1hcCwgbWF0ZXJpYWxpemUsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFdvcmtlck1lc3NhZ2VOb3RpZmljYXRpb24gfSBmcm9tICcuL29ic2VydmFibGUtd29ya2VyLnR5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBXb3JrZXJPcHRpb25zIHtcbiAgdGVybWluYXRlT25Db21wbGV0ZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Xb3JrZXI8SW5wdXQsIE91dHB1dD4oXG4gIHdvcmtlckZhY3Rvcnk6ICgpID0+IFdvcmtlcixcbiAgaW5wdXQkOiBPYnNlcnZhYmxlPElucHV0PixcbiAgc2VsZWN0VHJhbnNmZXJhYmxlcz86IChpbnB1dDogSW5wdXQpID0+IFRyYW5zZmVyYWJsZVtdLFxuICBvcHRpb25zOiBXb3JrZXJPcHRpb25zID0geyB0ZXJtaW5hdGVPbkNvbXBsZXRlOiB0cnVlIH0sXG4pOiBPYnNlcnZhYmxlPE91dHB1dD4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGUoKHJlc3BvbnNlT2JzZXJ2ZXI6IE9ic2VydmVyPE5vdGlmaWNhdGlvbjxPdXRwdXQ+PikgPT4ge1xuICAgIGxldCB3b3JrZXI6IFdvcmtlcjtcbiAgICBsZXQgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgICB0cnkge1xuICAgICAgd29ya2VyID0gd29ya2VyRmFjdG9yeSgpO1xuICAgICAgd29ya2VyLm9ubWVzc2FnZSA9IChldjogV29ya2VyTWVzc2FnZU5vdGlmaWNhdGlvbjxPdXRwdXQ+KSA9PiByZXNwb25zZU9ic2VydmVyLm5leHQoZXYuZGF0YSk7XG4gICAgICB3b3JrZXIub25lcnJvciA9IChldjogRXJyb3JFdmVudCkgPT4gcmVzcG9uc2VPYnNlcnZlci5lcnJvcihldik7XG5cbiAgICAgIHN1YnNjcmlwdGlvbiA9IGlucHV0JFxuICAgICAgICAucGlwZShcbiAgICAgICAgICBtYXRlcmlhbGl6ZSgpLFxuICAgICAgICAgIHRhcChpbnB1dCA9PiB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0VHJhbnNmZXJhYmxlcyAmJiBpbnB1dC5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgICBjb25zdCB0cmFuc2ZlcmFibGVzID0gc2VsZWN0VHJhbnNmZXJhYmxlcyhpbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShpbnB1dCwgdHJhbnNmZXJhYmxlcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2UoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVzcG9uc2VPYnNlcnZlci5lcnJvcihlcnJvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgICBpZiAod29ya2VyICYmIG9wdGlvbnMudGVybWluYXRlT25Db21wbGV0ZSkge1xuICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkucGlwZShcbiAgICBtYXAoKHsga2luZCwgdmFsdWUsIGVycm9yIH0pID0+IG5ldyBOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSksXG4gICAgZGVtYXRlcmlhbGl6ZSgpLFxuICApO1xufVxuIl19