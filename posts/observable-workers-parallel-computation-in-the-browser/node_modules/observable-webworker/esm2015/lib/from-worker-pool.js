/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable, of, Subject, zip } from 'rxjs';
import { finalize, map, mergeAll, tap } from 'rxjs/operators';
import { fromWorker } from './from-worker';
/**
 * @record
 */
function LazyWorker() { }
if (false) {
    /** @type {?} */
    LazyWorker.prototype.factory;
    /** @type {?} */
    LazyWorker.prototype.terminate;
    /** @type {?} */
    LazyWorker.prototype.processing;
    /** @type {?} */
    LazyWorker.prototype.started;
    /** @type {?} */
    LazyWorker.prototype.index;
}
/**
 * @record
 * @template I, O
 */
export function WorkerPoolOptions() { }
if (false) {
    /** @type {?|undefined} */
    WorkerPoolOptions.prototype.workerCount;
    /** @type {?|undefined} */
    WorkerPoolOptions.prototype.flattenOperator;
    /** @type {?|undefined} */
    WorkerPoolOptions.prototype.selectTransferables;
}
/**
 * @template I, O
 * @param {?} workerConstructor
 * @param {?} workUnitIterator
 * @param {?=} options
 * @return {?}
 */
export function fromWorkerPool(workerConstructor, workUnitIterator, options) {
    const { 
    // tslint:disable-next-line:no-unnecessary-initializer
    selectTransferables = undefined, workerCount = navigator.hardwareConcurrency - 1, flattenOperator = mergeAll(), } = options || {};
    return new Observable((/**
     * @param {?} resultObserver
     * @return {?}
     */
    resultObserver => {
        /** @type {?} */
        const idleWorker$$ = new Subject();
        /** @type {?} */
        let completed = 0;
        /** @type {?} */
        let sent = 0;
        /** @type {?} */
        let finished = false;
        /** @type {?} */
        const lazyWorkers = Array.from({ length: workerCount }).map((/**
         * @param {?} _
         * @param {?} index
         * @return {?}
         */
        (_, index) => {
            return {
                _cachedWorker: null,
                /**
                 * @return {?}
                 */
                factory() {
                    if (!this._cachedWorker) {
                        this._cachedWorker = workerConstructor(index);
                        this.started = true;
                    }
                    return this._cachedWorker;
                },
                /**
                 * @return {?}
                 */
                terminate() {
                    if (this.started && !this.processing) {
                        this._cachedWorker.terminate();
                    }
                },
                processing: false,
                started: false,
                index,
            };
        }));
        /** @type {?} */
        const processor$ = zip(idleWorker$$, workUnitIterator).pipe(tap((/**
         * @param {?} __0
         * @return {?}
         */
        ([worker]) => {
            sent++;
            worker.processing = true;
        })), finalize((/**
         * @return {?}
         */
        () => {
            idleWorker$$.complete();
            finished = true;
            lazyWorkers.forEach((/**
             * @param {?} worker
             * @return {?}
             */
            worker => worker.terminate()));
        })), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([worker, unitWork]) => {
            return fromWorker((/**
             * @return {?}
             */
            () => worker.factory()), of(unitWork), selectTransferables, {
                terminateOnComplete: false,
            }).pipe(finalize((/**
             * @return {?}
             */
            () => {
                completed++;
                worker.processing = false;
                if (!finished) {
                    idleWorker$$.next(worker);
                }
                else {
                    worker.terminate();
                }
                if (finished && completed === sent) {
                    resultObserver.complete();
                }
            })));
        })), flattenOperator);
        /** @type {?} */
        const sub = processor$.subscribe(resultObserver);
        lazyWorkers.forEach((/**
         * @param {?} w
         * @return {?}
         */
        w => idleWorker$$.next(w)));
        return (/**
         * @return {?}
         */
        () => sub.unsubscribe());
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbS13b3JrZXItcG9vbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29ic2VydmFibGUtd2Vid29ya2VyLyIsInNvdXJjZXMiOlsibGliL2Zyb20td29ya2VyLXBvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQW1CLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBRTNDLHlCQU1DOzs7SUFMQyw2QkFBc0I7O0lBQ3RCLCtCQUFzQjs7SUFDdEIsZ0NBQW9COztJQUNwQiw2QkFBaUI7O0lBQ2pCLDJCQUFjOzs7Ozs7QUFHaEIsdUNBSUM7OztJQUhDLHdDQUFxQjs7SUFDckIsNENBQXVFOztJQUN2RSxnREFBbUQ7Ozs7Ozs7OztBQUdyRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixpQkFBNEMsRUFDNUMsZ0JBQW9DLEVBQ3BDLE9BQWlDO1VBRTNCO0lBQ0osc0RBQXNEO0lBQ3RELG1CQUFtQixHQUFHLFNBQVMsRUFDL0IsV0FBVyxHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLEVBQy9DLGVBQWUsR0FBRyxRQUFRLEVBQUssR0FDaEMsR0FBRyxPQUFPLElBQUksRUFBRTtJQUVqQixPQUFPLElBQUksVUFBVTs7OztJQUFJLGNBQWMsQ0FBQyxFQUFFOztjQUNsQyxZQUFZLEdBQXdCLElBQUksT0FBTyxFQUFFOztZQUVuRCxTQUFTLEdBQUcsQ0FBQzs7WUFDYixJQUFJLEdBQUcsQ0FBQzs7WUFDUixRQUFRLEdBQUcsS0FBSzs7Y0FFZCxXQUFXLEdBQWlCLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxHQUFHOzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3JGLE9BQU87Z0JBQ0wsYUFBYSxFQUFFLElBQUk7Ozs7Z0JBQ25CLE9BQU87b0JBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7d0JBQ3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQzlDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO3FCQUNyQjtvQkFDRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7Z0JBQzVCLENBQUM7Ozs7Z0JBQ0QsU0FBUztvQkFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO3dCQUNwQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO3FCQUNoQztnQkFDSCxDQUFDO2dCQUNELFVBQVUsRUFBRSxLQUFLO2dCQUNqQixPQUFPLEVBQUUsS0FBSztnQkFDZCxLQUFLO2FBQ04sQ0FBQztRQUNKLENBQUMsRUFBQzs7Y0FFSSxVQUFVLEdBQUcsR0FBRyxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FDekQsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ2YsSUFBSSxFQUFFLENBQUM7WUFDUCxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUMzQixDQUFDLEVBQUMsRUFDRixRQUFROzs7UUFBQyxHQUFHLEVBQUU7WUFDWixZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNoQixXQUFXLENBQUMsT0FBTzs7OztZQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFDLENBQUM7UUFDcEQsQ0FBQyxFQUFDLEVBQ0YsR0FBRzs7OztRQUNELENBQUMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEVBQWlCLEVBQUU7WUFDcEMsT0FBTyxVQUFVOzs7WUFBTyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLG1CQUFtQixFQUFFO2dCQUNqRixtQkFBbUIsRUFBRSxLQUFLO2FBQzNCLENBQUMsQ0FBQyxJQUFJLENBQ0wsUUFBUTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNaLFNBQVMsRUFBRSxDQUFDO2dCQUVaLE1BQU0sQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO2dCQUUxQixJQUFJLENBQUMsUUFBUSxFQUFFO29CQUNiLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzNCO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQkFDcEI7Z0JBRUQsSUFBSSxRQUFRLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtvQkFDbEMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUMzQjtZQUNILENBQUMsRUFBQyxDQUNILENBQUM7UUFDSixDQUFDLEVBQ0YsRUFDRCxlQUFlLENBQ2hCOztjQUVLLEdBQUcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztRQUVoRCxXQUFXLENBQUMsT0FBTzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO1FBRS9DOzs7UUFBTyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUM7SUFDakMsQ0FBQyxFQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZUlucHV0LCBvZiwgU3ViamVjdCwgemlwIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSwgbWFwLCBtZXJnZUFsbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZnJvbVdvcmtlciB9IGZyb20gJy4vZnJvbS13b3JrZXInO1xuXG5pbnRlcmZhY2UgTGF6eVdvcmtlciB7XG4gIGZhY3Rvcnk6ICgpID0+IFdvcmtlcjtcbiAgdGVybWluYXRlOiAoKSA9PiB2b2lkO1xuICBwcm9jZXNzaW5nOiBib29sZWFuO1xuICBzdGFydGVkOiBib29sZWFuO1xuICBpbmRleDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdvcmtlclBvb2xPcHRpb25zPEksIE8+IHtcbiAgd29ya2VyQ291bnQ/OiBudW1iZXI7XG4gIGZsYXR0ZW5PcGVyYXRvcj86IChpbnB1dCQ6IE9ic2VydmFibGU8T2JzZXJ2YWJsZTxPPj4pID0+IE9ic2VydmFibGU8Tz47XG4gIHNlbGVjdFRyYW5zZmVyYWJsZXM/OiAoaW5wdXQ6IEkpID0+IFRyYW5zZmVyYWJsZVtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVdvcmtlclBvb2w8SSwgTz4oXG4gIHdvcmtlckNvbnN0cnVjdG9yOiAoaW5kZXg6IG51bWJlcikgPT4gV29ya2VyLFxuICB3b3JrVW5pdEl0ZXJhdG9yOiBPYnNlcnZhYmxlSW5wdXQ8ST4sXG4gIG9wdGlvbnM/OiBXb3JrZXJQb29sT3B0aW9uczxJLCBPPixcbik6IE9ic2VydmFibGU8Tz4ge1xuICBjb25zdCB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVubmVjZXNzYXJ5LWluaXRpYWxpemVyXG4gICAgc2VsZWN0VHJhbnNmZXJhYmxlcyA9IHVuZGVmaW5lZCxcbiAgICB3b3JrZXJDb3VudCA9IG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5IC0gMSxcbiAgICBmbGF0dGVuT3BlcmF0b3IgPSBtZXJnZUFsbDxPPigpLFxuICB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICByZXR1cm4gbmV3IE9ic2VydmFibGU8Tz4ocmVzdWx0T2JzZXJ2ZXIgPT4ge1xuICAgIGNvbnN0IGlkbGVXb3JrZXIkJDogU3ViamVjdDxMYXp5V29ya2VyPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgICBsZXQgY29tcGxldGVkID0gMDtcbiAgICBsZXQgc2VudCA9IDA7XG4gICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG5cbiAgICBjb25zdCBsYXp5V29ya2VyczogTGF6eVdvcmtlcltdID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogd29ya2VyQ291bnQgfSkubWFwKChfLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX2NhY2hlZFdvcmtlcjogbnVsbCxcbiAgICAgICAgZmFjdG9yeSgpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX2NhY2hlZFdvcmtlcikge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkV29ya2VyID0gd29ya2VyQ29uc3RydWN0b3IoaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFdvcmtlcjtcbiAgICAgICAgfSxcbiAgICAgICAgdGVybWluYXRlKCkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXJ0ZWQgJiYgIXRoaXMucHJvY2Vzc2luZykge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkV29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2Vzc2luZzogZmFsc2UsXG4gICAgICAgIHN0YXJ0ZWQ6IGZhbHNlLFxuICAgICAgICBpbmRleCxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBwcm9jZXNzb3IkID0gemlwKGlkbGVXb3JrZXIkJCwgd29ya1VuaXRJdGVyYXRvcikucGlwZShcbiAgICAgIHRhcCgoW3dvcmtlcl0pID0+IHtcbiAgICAgICAgc2VudCsrO1xuICAgICAgICB3b3JrZXIucHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICB9KSxcbiAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgaWRsZVdvcmtlciQkLmNvbXBsZXRlKCk7XG4gICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgbGF6eVdvcmtlcnMuZm9yRWFjaCh3b3JrZXIgPT4gd29ya2VyLnRlcm1pbmF0ZSgpKTtcbiAgICAgIH0pLFxuICAgICAgbWFwKFxuICAgICAgICAoW3dvcmtlciwgdW5pdFdvcmtdKTogT2JzZXJ2YWJsZTxPPiA9PiB7XG4gICAgICAgICAgcmV0dXJuIGZyb21Xb3JrZXI8SSwgTz4oKCkgPT4gd29ya2VyLmZhY3RvcnkoKSwgb2YodW5pdFdvcmspLCBzZWxlY3RUcmFuc2ZlcmFibGVzLCB7XG4gICAgICAgICAgICB0ZXJtaW5hdGVPbkNvbXBsZXRlOiBmYWxzZSxcbiAgICAgICAgICB9KS5waXBlKFxuICAgICAgICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICAgICAgICBjb21wbGV0ZWQrKztcblxuICAgICAgICAgICAgICB3b3JrZXIucHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgIGlmICghZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICBpZGxlV29ya2VyJCQubmV4dCh3b3JrZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChmaW5pc2hlZCAmJiBjb21wbGV0ZWQgPT09IHNlbnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRPYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgKSxcbiAgICAgIGZsYXR0ZW5PcGVyYXRvcixcbiAgICApO1xuXG4gICAgY29uc3Qgc3ViID0gcHJvY2Vzc29yJC5zdWJzY3JpYmUocmVzdWx0T2JzZXJ2ZXIpO1xuXG4gICAgbGF6eVdvcmtlcnMuZm9yRWFjaCh3ID0+IGlkbGVXb3JrZXIkJC5uZXh0KHcpKTtcblxuICAgIHJldHVybiAoKSA9PiBzdWIudW5zdWJzY3JpYmUoKTtcbiAgfSk7XG59XG4iXX0=