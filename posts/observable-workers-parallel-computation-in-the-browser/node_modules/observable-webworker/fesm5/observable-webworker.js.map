{"version":3,"file":"observable-webworker.js","sources":["ng://observable-webworker/lib/run-worker.ts","ng://observable-webworker/lib/observable-worker.decorator.ts","ng://observable-webworker/lib/from-worker.ts","ng://observable-webworker/lib/from-worker-pool.ts"],"sourcesContent":["import { fromEvent, Notification, Observable, Subscription } from 'rxjs';\nimport { concatMap, dematerialize, filter, map, materialize } from 'rxjs/operators';\nimport { DoTransferableWork, DoWork, DoWorkUnit, WorkerMessageNotification } from './observable-worker.types';\n\nexport type ObservableWorkerConstructor<I = any, O = any> = new (...args) => DoWork<I, O> | DoWorkUnit<I, O>;\n\n/** @internal */\nexport type WorkerPostMessageNotification<T> = (message: Notification<T>, tranferables?: Transferable[]) => void;\n\n/** @internal */\nexport function workerIsTransferableType<I, O>(\n  worker: DoWork<I, O> | DoWorkUnit<I, O>,\n): worker is DoTransferableWork<I, O> {\n  return !!worker.selectTransferables;\n}\n\n/** @internal */\nexport function workerIsUnitType<I, O>(worker: DoWork<I, O> | DoWorkUnit<I, O>): worker is DoWorkUnit<I, O> {\n  return !!(worker as DoWorkUnit<I, O>).workUnit;\n}\n\n/** @internal */\nexport function getWorkerResult<I, O>(\n  worker: DoWork<I, O> | DoWorkUnit<I, O>,\n  incomingMessages$: Observable<WorkerMessageNotification<I>>,\n): Observable<Notification<O>> {\n  const input$ = incomingMessages$.pipe(\n    map((e: WorkerMessageNotification<I>): Notification<I> => e.data),\n    map((n: Notification<I>) => new Notification(n.kind, n.value, n.error)),\n    // ignore complete, the calling thread will manage termination of the stream\n    filter(n => n.kind !== 'C'),\n    dematerialize(),\n  );\n\n  return workerIsUnitType(worker)\n    ? input$.pipe(concatMap(input => worker.workUnit(input).pipe(materialize())))\n    : worker.work(input$).pipe(materialize());\n}\n\nexport function runWorker<I, O>(workerConstructor: ObservableWorkerConstructor<I, O>): Subscription {\n  const worker = new workerConstructor();\n\n  const incomingMessages$ = fromEvent<WorkerMessageNotification<I>>(self, 'message');\n\n  const transferableWorker = workerIsTransferableType(worker);\n\n  return getWorkerResult(worker, incomingMessages$).subscribe((notification: Notification<O>) => {\n    // type to workaround typescript trying to compile as non-webworker context\n    const workerPostMessage = (postMessage as unknown) as WorkerPostMessageNotification<O>;\n\n    if (transferableWorker && notification.hasValue) {\n      workerPostMessage(notification, worker.selectTransferables(notification.value));\n    } else {\n      workerPostMessage(notification);\n    }\n  });\n}\n","import { ObservableWorkerConstructor, runWorker } from './run-worker';\n\nexport function ObservableWorker() {\n  return <I, O>(workerConstructor: ObservableWorkerConstructor<I, O>): void => {\n    runWorker(workerConstructor);\n  };\n}\n","import { Notification, Observable, Observer, Subscription } from 'rxjs';\nimport { dematerialize, map, materialize, tap } from 'rxjs/operators';\nimport { WorkerMessageNotification } from './observable-worker.types';\n\nexport interface WorkerOptions {\n  terminateOnComplete: boolean;\n}\n\nexport function fromWorker<Input, Output>(\n  workerFactory: () => Worker,\n  input$: Observable<Input>,\n  selectTransferables?: (input: Input) => Transferable[],\n  options: WorkerOptions = { terminateOnComplete: true },\n): Observable<Output> {\n  return new Observable((responseObserver: Observer<Notification<Output>>) => {\n    let worker: Worker;\n    let subscription: Subscription;\n\n    try {\n      worker = workerFactory();\n      worker.onmessage = (ev: WorkerMessageNotification<Output>) => responseObserver.next(ev.data);\n      worker.onerror = (ev: ErrorEvent) => responseObserver.error(ev);\n\n      subscription = input$\n        .pipe(\n          materialize(),\n          tap(input => {\n            if (selectTransferables && input.hasValue) {\n              const transferables = selectTransferables(input.value);\n              worker.postMessage(input, transferables);\n            } else {\n              worker.postMessage(input);\n            }\n          }),\n        )\n        .subscribe();\n    } catch (error) {\n      responseObserver.error(error);\n    }\n\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n      if (worker && options.terminateOnComplete) {\n        worker.terminate();\n      }\n    };\n  }).pipe(\n    map(({ kind, value, error }) => new Notification(kind, value, error)),\n    dematerialize(),\n  );\n}\n","import { Observable, ObservableInput, of, Subject, zip } from 'rxjs';\nimport { finalize, map, mergeAll, tap } from 'rxjs/operators';\nimport { fromWorker } from './from-worker';\n\ninterface LazyWorker {\n  factory: () => Worker;\n  terminate: () => void;\n  processing: boolean;\n  started: boolean;\n  index: number;\n}\n\nexport interface WorkerPoolOptions<I, O> {\n  workerCount?: number;\n  flattenOperator?: (input$: Observable<Observable<O>>) => Observable<O>;\n  selectTransferables?: (input: I) => Transferable[];\n}\n\nexport function fromWorkerPool<I, O>(\n  workerConstructor: (index: number) => Worker,\n  workUnitIterator: ObservableInput<I>,\n  options?: WorkerPoolOptions<I, O>,\n): Observable<O> {\n  const {\n    // tslint:disable-next-line:no-unnecessary-initializer\n    selectTransferables = undefined,\n    workerCount = navigator.hardwareConcurrency - 1,\n    flattenOperator = mergeAll<O>(),\n  } = options || {};\n\n  return new Observable<O>(resultObserver => {\n    const idleWorker$$: Subject<LazyWorker> = new Subject();\n\n    let completed = 0;\n    let sent = 0;\n    let finished = false;\n\n    const lazyWorkers: LazyWorker[] = Array.from({ length: workerCount }).map((_, index) => {\n      return {\n        _cachedWorker: null,\n        factory() {\n          if (!this._cachedWorker) {\n            this._cachedWorker = workerConstructor(index);\n            this.started = true;\n          }\n          return this._cachedWorker;\n        },\n        terminate() {\n          if (this.started && !this.processing) {\n            this._cachedWorker.terminate();\n          }\n        },\n        processing: false,\n        started: false,\n        index,\n      };\n    });\n\n    const processor$ = zip(idleWorker$$, workUnitIterator).pipe(\n      tap(([worker]) => {\n        sent++;\n        worker.processing = true;\n      }),\n      finalize(() => {\n        idleWorker$$.complete();\n        finished = true;\n        lazyWorkers.forEach(worker => worker.terminate());\n      }),\n      map(\n        ([worker, unitWork]): Observable<O> => {\n          return fromWorker<I, O>(() => worker.factory(), of(unitWork), selectTransferables, {\n            terminateOnComplete: false,\n          }).pipe(\n            finalize(() => {\n              completed++;\n\n              worker.processing = false;\n\n              if (!finished) {\n                idleWorker$$.next(worker);\n              } else {\n                worker.terminate();\n              }\n\n              if (finished && completed === sent) {\n                resultObserver.complete();\n              }\n            }),\n          );\n        },\n      ),\n      flattenOperator,\n    );\n\n    const sub = processor$.subscribe(resultObserver);\n\n    lazyWorkers.forEach(w => idleWorker$$.next(w));\n\n    return () => sub.unsubscribe();\n  });\n}\n"],"names":[],"mappings":"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"}