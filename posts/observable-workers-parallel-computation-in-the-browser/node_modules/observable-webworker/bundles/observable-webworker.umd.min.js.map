{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://observable-webworker/lib/run-worker.ts","ng://observable-webworker/lib/from-worker.ts","ng://observable-webworker/lib/observable-worker.decorator.ts","ng://observable-webworker/lib/from-worker-pool.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","workerIsTransferableType","worker","selectTransferables","workerIsUnitType","workUnit","getWorkerResult","incomingMessages$","input$","pipe","map","data","Notification","kind","filter","dematerialize","concatMap","input","materialize","work","runWorker","workerConstructor","fromEvent","self","transferableWorker","subscribe","notification","workerPostMessage","hasValue","fromWorker","workerFactory","options","terminateOnComplete","Observable","responseObserver","subscription","onmessage","ev","onerror","tap","transferables","postMessage","unsubscribe","terminate","_a","workUnitIterator","_b","undefined","_c","workerCount","navigator","hardwareConcurrency","_d","flattenOperator","operators","mergeAll","resultObserver","idleWorker$$","Subject","completed","sent","finished","lazyWorkers","Array","from","length","_","index","_cachedWorker","factory","this","started","processing","sub","zip","finalize","complete","forEach","unitWork","of","w"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { fromEvent, Notification, Observable, Subscription } from 'rxjs';\nimport { concatMap, dematerialize, filter, map, materialize } from 'rxjs/operators';\nimport { DoTransferableWork, DoWork, DoWorkUnit, WorkerMessageNotification } from './observable-worker.types';\n\nexport type ObservableWorkerConstructor<I = any, O = any> = new (...args) => DoWork<I, O> | DoWorkUnit<I, O>;\n\n/** @internal */\nexport type WorkerPostMessageNotification<T> = (message: Notification<T>, tranferables?: Transferable[]) => void;\n\n/** @internal */\nexport function workerIsTransferableType<I, O>(\n  worker: DoWork<I, O> | DoWorkUnit<I, O>,\n): worker is DoTransferableWork<I, O> {\n  return !!worker.selectTransferables;\n}\n\n/** @internal */\nexport function workerIsUnitType<I, O>(worker: DoWork<I, O> | DoWorkUnit<I, O>): worker is DoWorkUnit<I, O> {\n  return !!(worker as DoWorkUnit<I, O>).workUnit;\n}\n\n/** @internal */\nexport function getWorkerResult<I, O>(\n  worker: DoWork<I, O> | DoWorkUnit<I, O>,\n  incomingMessages$: Observable<WorkerMessageNotification<I>>,\n): Observable<Notification<O>> {\n  const input$ = incomingMessages$.pipe(\n    map((e: WorkerMessageNotification<I>): Notification<I> => e.data),\n    map((n: Notification<I>) => new Notification(n.kind, n.value, n.error)),\n    // ignore complete, the calling thread will manage termination of the stream\n    filter(n => n.kind !== 'C'),\n    dematerialize(),\n  );\n\n  return workerIsUnitType(worker)\n    ? input$.pipe(concatMap(input => worker.workUnit(input).pipe(materialize())))\n    : worker.work(input$).pipe(materialize());\n}\n\nexport function runWorker<I, O>(workerConstructor: ObservableWorkerConstructor<I, O>): Subscription {\n  const worker = new workerConstructor();\n\n  const incomingMessages$ = fromEvent<WorkerMessageNotification<I>>(self, 'message');\n\n  const transferableWorker = workerIsTransferableType(worker);\n\n  return getWorkerResult(worker, incomingMessages$).subscribe((notification: Notification<O>) => {\n    // type to workaround typescript trying to compile as non-webworker context\n    const workerPostMessage = (postMessage as unknown) as WorkerPostMessageNotification<O>;\n\n    if (transferableWorker && notification.hasValue) {\n      workerPostMessage(notification, worker.selectTransferables(notification.value));\n    } else {\n      workerPostMessage(notification);\n    }\n  });\n}\n","import { Notification, Observable, Observer, Subscription } from 'rxjs';\nimport { dematerialize, map, materialize, tap } from 'rxjs/operators';\nimport { WorkerMessageNotification } from './observable-worker.types';\n\nexport interface WorkerOptions {\n  terminateOnComplete: boolean;\n}\n\nexport function fromWorker<Input, Output>(\n  workerFactory: () => Worker,\n  input$: Observable<Input>,\n  selectTransferables?: (input: Input) => Transferable[],\n  options: WorkerOptions = { terminateOnComplete: true },\n): Observable<Output> {\n  return new Observable((responseObserver: Observer<Notification<Output>>) => {\n    let worker: Worker;\n    let subscription: Subscription;\n\n    try {\n      worker = workerFactory();\n      worker.onmessage = (ev: WorkerMessageNotification<Output>) => responseObserver.next(ev.data);\n      worker.onerror = (ev: ErrorEvent) => responseObserver.error(ev);\n\n      subscription = input$\n        .pipe(\n          materialize(),\n          tap(input => {\n            if (selectTransferables && input.hasValue) {\n              const transferables = selectTransferables(input.value);\n              worker.postMessage(input, transferables);\n            } else {\n              worker.postMessage(input);\n            }\n          }),\n        )\n        .subscribe();\n    } catch (error) {\n      responseObserver.error(error);\n    }\n\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n      if (worker && options.terminateOnComplete) {\n        worker.terminate();\n      }\n    };\n  }).pipe(\n    map(({ kind, value, error }) => new Notification(kind, value, error)),\n    dematerialize(),\n  );\n}\n","import { ObservableWorkerConstructor, runWorker } from './run-worker';\n\nexport function ObservableWorker() {\n  return <I, O>(workerConstructor: ObservableWorkerConstructor<I, O>): void => {\n    runWorker(workerConstructor);\n  };\n}\n","import { Observable, ObservableInput, of, Subject, zip } from 'rxjs';\nimport { finalize, map, mergeAll, tap } from 'rxjs/operators';\nimport { fromWorker } from './from-worker';\n\ninterface LazyWorker {\n  factory: () => Worker;\n  terminate: () => void;\n  processing: boolean;\n  started: boolean;\n  index: number;\n}\n\nexport interface WorkerPoolOptions<I, O> {\n  workerCount?: number;\n  flattenOperator?: (input$: Observable<Observable<O>>) => Observable<O>;\n  selectTransferables?: (input: I) => Transferable[];\n}\n\nexport function fromWorkerPool<I, O>(\n  workerConstructor: (index: number) => Worker,\n  workUnitIterator: ObservableInput<I>,\n  options?: WorkerPoolOptions<I, O>,\n): Observable<O> {\n  const {\n    // tslint:disable-next-line:no-unnecessary-initializer\n    selectTransferables = undefined,\n    workerCount = navigator.hardwareConcurrency - 1,\n    flattenOperator = mergeAll<O>(),\n  } = options || {};\n\n  return new Observable<O>(resultObserver => {\n    const idleWorker$$: Subject<LazyWorker> = new Subject();\n\n    let completed = 0;\n    let sent = 0;\n    let finished = false;\n\n    const lazyWorkers: LazyWorker[] = Array.from({ length: workerCount }).map((_, index) => {\n      return {\n        _cachedWorker: null,\n        factory() {\n          if (!this._cachedWorker) {\n            this._cachedWorker = workerConstructor(index);\n            this.started = true;\n          }\n          return this._cachedWorker;\n        },\n        terminate() {\n          if (this.started && !this.processing) {\n            this._cachedWorker.terminate();\n          }\n        },\n        processing: false,\n        started: false,\n        index,\n      };\n    });\n\n    const processor$ = zip(idleWorker$$, workUnitIterator).pipe(\n      tap(([worker]) => {\n        sent++;\n        worker.processing = true;\n      }),\n      finalize(() => {\n        idleWorker$$.complete();\n        finished = true;\n        lazyWorkers.forEach(worker => worker.terminate());\n      }),\n      map(\n        ([worker, unitWork]): Observable<O> => {\n          return fromWorker<I, O>(() => worker.factory(), of(unitWork), selectTransferables, {\n            terminateOnComplete: false,\n          }).pipe(\n            finalize(() => {\n              completed++;\n\n              worker.processing = false;\n\n              if (!finished) {\n                idleWorker$$.next(worker);\n              } else {\n                worker.terminate();\n              }\n\n              if (finished && completed === sent) {\n                resultObserver.complete();\n              }\n            }),\n          );\n        },\n      ),\n      flattenOperator,\n    );\n\n    const sub = processor$.subscribe(resultObserver);\n\n    lazyWorkers.forEach(w => idleWorker$$.next(w));\n\n    return () => sub.unsubscribe();\n  });\n}\n"]}